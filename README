'''Welcome to SPLUNK 4 JMX v1.2.4'''
by Damien T. Dallimore
June 2011
damien@dtdsoftware.com
----

'''OVERVIEW'''

This SPLUNK app provides the means to :

* connect to any local or remote JVM's JMX server, either via the remote JMX interface or attaching to a local JVM process
* query any MBean running on that server
* extract any MBean attributes (simple, composite or tabular)
* invoke MBean operations
* write attributes and operation results out in a default key/value format, or your own custom format, for SPLUNK indexing and searching
* declare clusters of JVM's for large scale JVM deployments
* runs on *Nix and Windows

Tested to date against Hotspot and JRockit JVM's.

This app is basically a custom scripted input comprising of a bash/bat script and a Java program.  I have bundled it up as an app for convenience  
and included some demo dashboards that graph up a selection of MBean attributes from the java.lang domain

Also refer to the application's "docs" directory for :

* PDF User Guide
* Javadoc API for creating a custom Formatter implementation
* Configuration schema documentation


'''INSTALLATION'''

* set the JAVA_HOME environment variable to the location of your JRE install location(version 1.6 +)
* set the SPLUNK_HOME environment variable to the install root of SPLUNK
* uncompress SPLUNK4JMX-1.2.4.tar.gz to SPLUNK_HOME/etc/apps
* restart SPLUNK


The SPLUNK4JMX app sets up a custom index(index=jms) and a custom script input (source=jmx) that parses and executes an XML config file
By default, the input script is disabled and the schedule time is 60 seconds
After you configure your config XML file, you should then enable the input script for the platform you are running on.
There is a "sh" script for Nix and a "bat" script for Windows.


'''INSTALLED COMPONENTS'''

The only components you really need to know about are in the SPLUNK_HOME/etc/apps/SPLUNK4JMX/bin directory

* bin/poll_jmx - this is the script that SPLUNK fires at scheduled intervals, this script invokes a Java program that has the logic for querying the JMX Server(s).
* bin/config/config.xml - this is the config file where you specify JMX server(s), MBeans and MBean attributes/operations.You can create as many config files,with any name, as you want and set them up as the argument to the poll_jmx script on the SPLUNK Manager Data Inputs page.

'''CONFIG.XML'''

Note : also refer to the configuration schema documentation in the docs directory

Included in the SPLUNK4JMX app distribution is a comprehensive sample config.xml
This sample file queries various java.lang MBeans and obtains attributes
You can use this as a basis for creating your own config files for whatever MBeans and attributes/operations you need to poll across your environment
To try out this sample config.xml file , just set the values for your environment in the jmxserver element , and you should be good to go.

"jmxpoller" is the root xml element

A custom "formatter" can be specified.Only 1 may be specified for the entire configuration.
This is a Java implementation of the "com.dtdsoftware.splunk.formatter.Formatter" interface.
The customer formatter class must be placed on the java classpath.
If a formatter declaration is omitted, then the default system formatter will be used.
Refer to the javadoc API in the docs directory for creating a custom Formatter implementation.

1 or more "jmxserver" elements can be included in this XML defintion ie:  if you need to accesss multiple different jmx sources within the same scheduled execution
Each "jmxserver" element you declare will be run in parallel.

"jmxuser" and "jmxpass" are optional , if not specified, they will be ignored

"host" can be a hostname, dns alias or ip address. 

"jmxport" is the JMX server port to connect to.

You can also attach directly to a locally running JVM process by specifying the Process ID in the "pid" attribute.
In this case, the "host", "jmxport", "jmxuser","jmxpass" attributes will not be used.
The host value will default to the localhost's name.

For more dynamic flexibility,rather than specifying a static Process ID value in the config xml , you can also specfy the name of a PID file that contains the JVM's Process ID.
You set this in the "pidFile" attribute.
Many long running Java processes output the PID value to a file, particularly if using a JVM Service Wrapper such as Tanuki.
Each time the Splunk JMX Poller runs, it will dynamically inspect the value of the PID from this file.
This way, you dont have to alter the config.xml each time you do a JVM restart.

You can also specify the path to a command to execute to output the JVM's PID.
You set this in the "pidCommand" attribute.
This command might be a custom script that looks for the JVM process and extracts the PID to STD OUT.
On Linux you could do this with a simple script that uses ps, grep and awk.

Example : ps -eafH | grep "java" | grep -v "grep" | awk '{print $2}'

Look at the example xml config file in the bin/config directory for usage examples.

Groups of jmxserver's that share that same mbeans can be grouped together in a cluster element,
so that you only have to declare the MBeans/MBean attributes/operations once ie: a cluster of JEE appservers, a cluster 
of Hadoop or Cassandra nodes etc...This will be useful for enterprises with very large scale JVM deployments.
MBean inheritance is supported, so you can have mbeans defined that are common to the cluster, and mbeans that are
specific to a cluster member.

At index time the "host" field is extracted and transformed into the SPLUNK internal host value.

"jvmDescription" is just meta data, useful for searching on in SPLUNK where you might have multiple JVM's on the same host

By default, no timestamp is added , instead relying on the SPLUNK index time as the event time.

For MBean definitions , standard JMX object name wildcard patterns * and ? are supported for the "domain" and "properties" attributes 
http://download.oracle.com/javase/1,5.0/docs/api/javax/management/ObjectName.html

If no values are specified for the "domain" and "properties" attributes , the value will default to the * wildcard

The MBean's canonical objectname will be written out to SPLUNK

Single, composite and tabular MBean attributes are supported.

For attributes that are multi level ie: composite and tabular attributes , then you can use a ":" delimited notation for specifying the attribute name.
See examples of this in config.xml

MBean operation invocation is supported.
You can declare operations that return a result or not , take arguments or not.
Operation overloading is supported for methods of the same name with different signatures.

The following parameter types are supported :

* int
* float
* double
* long
* short
* byte
* boolean
* char
* string

Internally these get autoboxed into their respective Object counterparts.
See config_operations_example.xml for usage scenarios.

''Example output line (default formatter)''

host=damien-laptop,jvmDescription="My test JVM",mbean="java.lang:type=Threading",count="47"

'''JVM "ATTACH" NATIVE LIBRARYS'''

When connecting directly to local JVM using a process ID, native librarys are used. You shouldn't need to do anything, they are loaded automatically.

Windows : JRE_HOME/bin/attach.dll
Linux : JDK_HOME/jre/lib/i386/libattach.so

NOTE : For some reason the Linux "attach" library is only packaged in the JRE that is part of a JDK install. Weird.

'''CREATING ADDITIONAL CONFIGURATION FILES'''

If required, you can easily create more config files to run at different schedules by "cloning"
the script input in Splunk Manager and specifying the name of the new config file as an argument to the poll_jmx script.
The config file should reside in SPLUNK_HOME/etc/apps/SPLUNK4JMX/bin/config

'''JMX SERVERS'''

To set up a JMX server for remote access via jvm system properties at startup, see this :
http://download.oracle.com/javase/1.5.0/docs/guide/management/agent.html#remote

'''LOGGING'''

By default , "error" level log events will be written to SPLUNK_HOME/etc/apps/SPLUNK4JMX/logs
The log file will roll daily and get timestamped.
If you need to tweak log settings, then the log4j.xml config file resides in jmxpoller.jar

'''TROUBLESHOOTING'''

* check your firewall setup
* check the correct spelling/case of your MBeans and MBean attribute/operation definitions
* check your hostname and port
* check your user and pass
* check that your JVM remote JMX access is correctly setup
* check that the SPLUNK_HOME and JAVA_HOME env variables have been correctly setup and exported
* ensure you have enabled the poll_jmx.sh / poll_jmx.bat script input
* check your process ID if trying to attach to a local JVM
* ensure your XML config adheres to the XSD
* look for errors in the log files

